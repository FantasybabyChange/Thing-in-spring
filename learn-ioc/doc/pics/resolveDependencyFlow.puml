@startuml resolveDependencyFlow
title resolveDependency flow
' !theme sketchy-outline
start
:DefaultListableBeanFactory:resolveDependency();
:DependencyDescriptor:initParameterNameDiscovery(ParameterNameDiscoverer);
note left
给方法参数提供初始化参数名称的发现策略
  当调用getParameterName()的时候提供方法参数 
end note
:根据依赖类型走入后续逻辑;
note left
   Optional,ObjectFactory,ObjectProvider
   jakarta.inject.Provider 等
   这里逻辑比较多 
end note
:getAutowireCandidateResolver;
partition AutowireCandidateResolver{

:getLazyResolutionProxyIfNecessary;
note right
  根据injection point,如果是懒加载会创建一个代理类
end note
}
:ConstructorResolver.setCurrentInjectionPoint(descriptor);
note left
通过依赖描述设置当前的注入点
end note
:descriptor.resolveShortcut;
note left
获取一个一个快照
end note
:getAutowireCandidateResolver().getSuggestedValue(descriptor);
note right
获取一个建议的Bean
end note
:resolveMultipleBeans;
note left
 如果是集合相关的Bean 通过这个方法解析 Map,Collection,Stream
  这个逻辑和单个Bean类似不过不需要判断主要的Bean
end note
if(multipleBean != null)then(yes)
: 返回multipleBeans;
else(no)
:findAutowireCandidates;
partition findAutowireCandidates{
  :BeanFactoryUtils.beanNamesForTypeIncludingAncestors;
note right
获取所有候选者Name
end note
if(isSelfReference || isAutowireCandidate) then(yes)
  :addCandidateEntry;
note left
没有自引用 和 满足自动装配则放入result中
end note
else(no)
 : 没有候选者进行处理;
endif
}
:determineAutowireCandidate;
note left
通过是否胃primary等条件决定自动装配
Bean的名称
end note
:matchingBeans.get(autowiredBeanName);
if(instance of Class)then(yes)
  :descriptor.resolveCandidate(autowiredBeanName, type, this);
  note left
  通过自动装配Bean的名称解析为最终的对象
  end note
endif
:Object result = instanceCandidate;
:返回 result;
@enduml