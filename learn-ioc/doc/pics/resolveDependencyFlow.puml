@startuml resolveDependencyFlow
title resolveDependency flow
' !theme sketchy-outline
start
:DefaultListableBeanFactory:resolveDependency();
:DependencyDescriptor:initParameterNameDiscovery(ParameterNameDiscoverer);
note left
给方法参数提供初始化参数名称的发现策略
  当调用getParameterName()的时候提供方法参数 
end note
:根据依赖类型走入后续逻辑;
note left
   Optional,ObjectFactory,ObjectProvider
   jakarta.inject.Provider 等
   这里逻辑比较多 
end note
partition AutowireCandidateResolver{
:getLazyResolutionProxyIfNecessary;
:initPropertySources();
note right
 初始化属性资源
 Initialize any placeholder property sources in the context environment.
end note
:validateRequiredProperties();
note right
 校验需要的属性
 Validate that all properties marked as required are resolvable
end note
}
:obtainFreshBeanFactory;
note left
Tell the subclass to refresh the internal bean factory
end note
:prepareBeanFactory;
note left
Prepare the bean factory for use in this context.
end note
:postProcessBeanFactory;
note right
Allows post-processing of the bean factory in context subclasses.
end note
partition post-process-bean {
:invokeBeanFactoryPostProcessors(beanFactory);
note right
Invoke factory processors registered as beans in the context.
end note
:registerBeanPostProcessors(beanFactory);
note right
Register bean processors that intercept bean creation.
end note
}
:initMessageSource;
note left
 Initialize message source for this context.
end note
:initApplicationEventMulticaster;
:onRefresh;
:registerListeners;
:finishBeanFactoryInitialization;
note left 
Instantiate all remaining (non-lazy-init) singletons.
end note 
:finishRefresh;
:resetCommonCaches;
@enduml